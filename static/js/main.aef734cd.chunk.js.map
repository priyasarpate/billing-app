{"version":3,"sources":["Invoice .js","InputForm.js","App.js","serviceWorker.js","index.js"],"names":["Invoice","props","className","data","item","price","GST","total","onClick","Resethandler","data-toggle","data-target","id","role","type","input","document","getElementById","html2canvas","then","canvas","imgData","toDataURL","pdf","jsPDF","addImage","save","data-dismiss","InputForm","handleChangeItem","event","setState","target","value","handleChangePrice","handleChangeGST","state","handleChangeTotal","parseFloat","console","log","Fragment","this","for","placeholder","onChange","onFocus","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aef734cd.chunk.js","sourcesContent":["import React from 'react';\nimport Bill from './Bill';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport './Invoice.css';\n\n\n\nfunction Invoice(props) {\n   let printDocument = () => {\n      const input = document.getElementById('divToPrint')\n      html2canvas(input)\n         .then((canvas) => {\n            const imgData = canvas.toDataURL('img/png')\n            const pdf = new jsPDF();\n            pdf.addImage(imgData, 'JPEG', 0, 0)\n            pdf.save('invoice.pdf')\n         })\n   }\n\n   return (\n      <div className='main'>\n         <div className='invoice'>\n            <h3>InVoice</h3>\n            <p className=\"input-value-1\">\n               Items:\n              <span className=\"highlight\">{props.data.item}</span></p>\n            <p className=\"input-value-2\">\n               price:\n              <span className=\"highlight\">{props.data.price}</span></p>\n            <p className=\"input-value-3\">\n               GST:\n              <span className=\"highlight\">{props.data.GST}</span></p>\n            <p className=\"input-value-4\">\n               Total:\n              <span className=\"highlight\">{props.data.total}</span></p>\n            <button onClick={props.Resethandler} className=\"reset-button\">Reset</button>\n <br />\n            <button className=\"print-button\" data-toggle=\"modal\" data-target=\"#myModal\">Print</button>\n            <div id=\"myModal\" className=\"modal fade\" role=\"dialog\">\n               <div className=\"modal-dialog\">\n                  <div className=\"modal-content\">\n                     <div className=\"modal-header\">\n                        <h4 className=\"modal-title\">CASH RECIEPT</h4>\n                     </div>\n                     <div className=\"modal-body\" id=\"divToPrint\">\n                        {/* Style your bill here */}\n                        <div className=\"row\">\n                           <div className=\"col\">\n                              <div>\n                                 <p> ITEMS : {props.data.item} </p>\n                                 <p className='dot'></p>\n                              </div>\n                              <div>\n                                 <p> PRICE : {props.data.price} </p>\n                                 <p className='dot1'></p>\n                              </div>\n                              {/* <p> GST:{props.data.item} </p> */}\n                              <div className='dot3'>\n                                 <p> GST : {props.data.GST} </p>\n                                 <h5> TOTAL : {props.data.total} </h5>\n                                 <p className='dot2'></p>\n                              </div>\n                             \n\n                           </div>\n                        </div>\n                     </div>\n                     <div className=\"modal-footer\">\n                        <button type=\"button\" onClick={printDocument} className=\"btn btn-primary\">Confirm Print!</button>\n                        <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n                     </div>\n                  </div>\n\n               </div>\n            </div>\n         </div>\n         <div>\n         </div>\n      </div>\n   )\n}\n\n\nexport default Invoice;","import React, { Component } from 'react';\nimport './Inputform.css';\nimport './App.css'\nimport Invoice from './Invoice ';\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      item: null,\n      price: null,\n      GST: null,\n      total: null,\n    }\n  }\n   \n\n  handleChangeItem = (event) => {\n    this.setState({\n      item: event.target.value\n      \n    })\n  }\n\n  handleChangePrice = (event) => {\n    this.setState({\n      price: event.target.value\n    \n    })\n  }\n\n  handleChangeGST = (event) => {\n    this.setState({\n      GST: this.state.price * 12 / 100\n\n    })\n  }\n\n  handleChangeTotal = (event) => {\n    let {price, GST} = this.state\n    this.setState({\n      total: parseFloat(price) + parseFloat(GST)  \n    })\n  }\n  Resethandler= ()=>{\n   console.log('from reset handler')\n   this.setState({\n     item: null,\n     price: 0,\n     GST: 0,\n     total: 0\n   })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n     <div className=\"col-md-4\">\n    <Invoice Resethandler ={this.Resethandler} data={this.state}/>\n    </div>  \n<form>\n    <h1>Fill Form</h1>\n    <div className=\"form-group\">\n        <label for=\"inputAddress\">Item:</label>\n        <input type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"Item Name\"\n            value={this.state.item} onChange={this.handleChangeItem} />\n    </div>\n\n    <div className=\"form-group\">\n        <label for=\"inputAddress2\">Price:</label>\n        <input type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Price\"\n            value=\n            {this.state.price} onChange={this.handleChangePrice}\n        />\n    </div>\n\n    <div className=\"form-group\">\n        <label for=\"inputAddress\">GST:</label>\n        <input type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"GST\"\n         value={this.state.GST} onFocus={this.handleChangeGST}\n\n        />\n    </div>\n\n    <div className=\"form-group\">\n        <label for=\"inputAddress2\">Total:</label>\n        <input type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Total\"\n         value=\n         {this.state.total} onFocus={this.handleChangeTotal}\n        />\n    </div>\n</form>\n      </React.Fragment>\n\n\n\n\n    )\n\n  }\n}\nexport default InputForm;","import React from 'react';\nimport './App.css';\nimport InputForm from './InputForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}